// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RescueCore
import AVFoundation
import CallKit
import SystemConfiguration.CaptiveNetwork
import CoreBluetooth
import CoreGraphics
import CoreImage
import CoreTelephony
import Darwin
import Foundation
import ObjectiveC
@_exported import RescueCore
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
@objc public enum RescueCameraFlash : Swift.UInt {
  case unavailable
  case off
  case on
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public enum RescueCameraDevice : Swift.UInt {
  case back
  case front
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public protocol RescueCameraDelegate {
  @objc optional func rescueCameraStreamingStarted(withAudio audio: Swift.Bool)
  @objc optional func rescueCameraFlashTurnedOn()
  @objc optional func rescueCameraFlashTurnedOff()
}
@objc public class RescueCamera : ObjectiveC.NSObject {
  @objc public func enable(withAudio audio: Swift.Bool)
  @objc public static let sharedInstance: RescueCore.RescueCamera
  @objc weak public var delegate: RescueCore.RescueCameraDelegate?
  @objc public var camera: RescueCore.RescueCameraDevice {
    @objc get
    @objc set
  }
  @objc public func startLocalStreamRendering(in view: UIKit.UIView)
  @objc public func stopLocalStreamRendering()
  @objc public func pauseStreamingVideo()
  @objc public func resumeStreamingVideo()
  @objc public func pauseStreamingAudio()
  @objc public func resumeStreamingAudio()
  @objc public var isStreaming: Swift.Bool {
    @objc get
  }
  @objc public var isFrozen: Swift.Bool {
    @objc get
  }
  @objc public var isPaused: Swift.Bool {
    @objc get
  }
  @objc public var isAudioRecordingMuted: Swift.Bool {
    @objc get
  }
  @objc public var hasFlash: Swift.Bool {
    @objc get
  }
  @objc public var flashState: RescueCore.RescueCameraFlash {
    @objc get
  }
  @objc public func turnOnFlash()
  @objc public func turnOffFlash()
  @objc deinit
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public class func automaticallyNotifiesObservers(forKey key: Swift.String) -> Swift.Bool
}
@objc public enum RescueSessionStatus : Swift.UInt {
  case idle
  case connecting
  case connected
  case onHold
  case transferred
  case disconnecting
  case disconnected
  case waitingForTechnician
  case connectionLost
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public enum RescueDisplayMode : Swift.UInt {
  case appScreen
  case rootView
  case disabled
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public protocol RescueDisplayDelegate {
  @objc optional func rescueDisplayRequestViewToSendToTechnician() -> UIKit.UIView
  @objc optional func rescueDisplayStreamingDidStart()
  @objc optional func rescueDisplayStreamingDidStop()
}
@objc public class RescueDisplay : ObjectiveC.NSObject {
  @objc public func enable()
  @objc weak public var delegate: RescueCore.RescueDisplayDelegate?
  @objc public var mode: RescueCore.RescueDisplayMode {
    @objc get
    @objc set
  }
  @objc public var rootView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc public var hiddenViews: Swift.Set<UIKit.UIView> {
    @objc get
    @objc set
  }
  @objc public func setView(_ view: UIKit.UIView, hidden hide: Swift.Bool)
  @objc public var webViewWithPasswordFields: WebKit.WKWebView? {
    @objc get
    @objc set
  }
  @objc public var disableLaserPointer: Swift.Bool
  @objc public var disableWhiteboard: Swift.Bool
  @objc deinit
}
@objc public class RescueSessionStartParameters : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func start(withPinCode pinCode: Swift.String)
  @objc public func start(withCompanyId companyId: Swift.String, andChannelName channelName: Swift.String)
  @objc public func start(withChannelId channelId: Swift.String)
  @objc public func continueSession() -> Swift.Bool
  @objc public var isConfigured: Swift.Bool {
    @objc get
  }
  @objc public var name: Swift.String?
  @objc public var comment1: Swift.String?
  @objc public var comment2: Swift.String?
  @objc public var comment3: Swift.String?
  @objc public var comment4: Swift.String?
  @objc public var comment5: Swift.String?
  @objc deinit
}
@objc public enum RescueChatMessageType : Swift.UInt {
  case system
  case user
  case technician
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public class RescueChatMessage : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc final public let message: Swift.String
  @objc final public let type: RescueCore.RescueChatMessageType
  @objc final public let date: Foundation.Date
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RescueChatDelegate {
  @objc optional func rescueChatTyping()
  @objc optional func rescueChatDidReceiveMessage(_ chatMessage: RescueCore.RescueChatMessage)
  @objc optional func rescueChatDidReceiveURL(_ url: Foundation.URL)
  @objc optional func recueChatDidBecomeEnabled()
  @objc optional func recueChatDidBecomeDisabled()
}
@objc public class RescueChat : ObjectiveC.NSObject {
  @objc public static let sharedInstance: RescueCore.RescueChat
  @objc weak public var delegate: RescueCore.RescueChatDelegate?
  @objc dynamic public var messages: [RescueCore.RescueChatMessage] {
    @objc get
  }
  @objc deinit
  @objc public func sendMessage(_ message: Swift.String)
  @objc public func typing()
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public class func automaticallyNotifiesObservers(forKey key: Swift.String) -> Swift.Bool
}
@objc public protocol RescueSessionDelegate {
  @objc func rescueSessionStatusDidChange(_ status: RescueCore.RescueSessionStatus)
  @objc func rescueSessionError(_ error: RescueCore.RescueError, withUserInfo userInfo: [Swift.String : Swift.AnyObject]?)
  @objc optional func rescueSessionReady()
}
@objc public class RescueSessionBase : ObjectiveC.NSObject {
  @objc public var apiKey: Swift.String
  @objc public var appGroup: Swift.String
  @objc weak public var delegate: RescueCore.RescueSessionDelegate?
  @objc public var connectToSessionAutomatically: Swift.Bool
  @objc public var sessionStartParameters: RescueCore.RescueSessionStartParameters {
    get
    }
  @objc dynamic public var sessionStatus: RescueCore.RescueSessionStatus {
    @objc get
  }
  @objc dynamic public var operatorName: Swift.String? {
    @objc get
  }
  @objc dynamic public var sessionStart: Foundation.Date? {
    @objc get
  }
  @objc public var transmittedData: Darwin.size_t {
    @objc get
  }
  @objc dynamic public var afterSessionSurveyURL: Foundation.URL? {
    @objc get
  }
  @objc deinit
  public var broadcastDelegate: RescueCore.RescueBroadcastDelegate? {
    get
    set
  }
  @objc public func startSession()
  @objc public func connectSession()
  @objc public func broadcastSession()
  @objc public func endSession()
  @objc public func reset()
}
extension RescueSessionBase {
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public class func automaticallyNotifiesObservers(forKey key: Swift.String) -> Swift.Bool
}
extension RescueDisplay {
  @objc public static var sharedInstance: RescueCore.RescueDisplay {
    @objc get
  }
}
@objc public enum RescueError : Swift.UInt {
  case noPincode = 1
  case pincodeExpired
  case noTechnicianAvailable
  case noTechnicianLicense
  case noReply
  case unknownReply
  case timeout
  case apiKeyMissing
  case appIdMissing
  case apiKeyDoesNotExist
  case apiKeyDisabled
  case apiKeyAndAppIdNotFromTheSameCompany
  case privateCodeApiKeyNotFromTheSameCompany
  case channelApiKeyNotFromTheSameCompany
  case channelDoesNotExist
  case companyDoesNotExist
  case request
  case requiredParameterMissing
  case invalidPincode
  case invalidPincodeForSessionType
  case appVersionNotSupported
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public protocol RescueBroadcastDelegate {
  @objc func rescueBroadcastDidStart()
  @objc func rescueBroadcastDidStop()
}
@objc public enum RescueLocalizationStringIdentifier : Swift.UInt {
  case statusConnecting
  case statusWaitingForTechnician
  case statusDisconnecting
  case statusDisconnected
  case statusStreamStarting
  case statusOnHold
  case statusTransferring
  case statusConnectionLost
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public class RescueLocalization : ObjectiveC.NSObject {
  @objc public class func localizedString(for identifier: RescueCore.RescueLocalizationStringIdentifier) -> Swift.String
  @objc public class func errorTitle() -> Swift.String
  @objc public class func errorMessage(forError error: RescueCore.RescueError) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension RescueCore.RescueCameraFlash : Swift.Equatable {}
extension RescueCore.RescueCameraFlash : Swift.Hashable {}
extension RescueCore.RescueCameraFlash : Swift.RawRepresentable {}
extension RescueCore.RescueCameraDevice : Swift.Equatable {}
extension RescueCore.RescueCameraDevice : Swift.Hashable {}
extension RescueCore.RescueCameraDevice : Swift.RawRepresentable {}
extension RescueCore.RescueSessionStatus : Swift.Equatable {}
extension RescueCore.RescueSessionStatus : Swift.Hashable {}
extension RescueCore.RescueSessionStatus : Swift.RawRepresentable {}
extension RescueCore.RescueDisplayMode : Swift.Equatable {}
extension RescueCore.RescueDisplayMode : Swift.Hashable {}
extension RescueCore.RescueDisplayMode : Swift.RawRepresentable {}
extension RescueCore.RescueChatMessageType : Swift.Equatable {}
extension RescueCore.RescueChatMessageType : Swift.Hashable {}
extension RescueCore.RescueChatMessageType : Swift.RawRepresentable {}
extension RescueCore.RescueError : Swift.Equatable {}
extension RescueCore.RescueError : Swift.Hashable {}
extension RescueCore.RescueError : Swift.RawRepresentable {}
extension RescueCore.RescueLocalizationStringIdentifier : Swift.Equatable {}
extension RescueCore.RescueLocalizationStringIdentifier : Swift.Hashable {}
extension RescueCore.RescueLocalizationStringIdentifier : Swift.RawRepresentable {}
